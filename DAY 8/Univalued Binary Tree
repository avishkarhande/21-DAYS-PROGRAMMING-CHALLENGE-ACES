/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isUnivalTree(TreeNode* root) {
        vector<int>output;
        if(root==NULL){
            return true;
        }
        queue<TreeNode*>pendingNodes;
        pendingNodes.push(root);
        while(pendingNodes.size()!=0){
            TreeNode* front = pendingNodes.front();
            output.push_back(front->val);
            pendingNodes.pop();
            if(front->left){
                pendingNodes.push(front->left);
            }
            if(front->right){
                pendingNodes.push(front->right);
            }
        }
        sort(output.begin(),output.end());
        if(output[output.size()-1]==output[0]){
            return true;
        }else{
            return false;
        }
    }
};
